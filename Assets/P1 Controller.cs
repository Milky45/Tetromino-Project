//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/P1 Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/P1 Controller.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @P1Controller: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @P1Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""P1 Controller"",
    ""maps"": [
        {
            ""name"": ""Vs Mode P1"",
            ""id"": ""43995379-e198-4222-8aea-06b55791742d"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""55c0a2fa-5b55-44e6-86e9-a3e16f34facd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""efc799c1-df64-4708-ba61-92864791755d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""c2e9fdb3-b9ae-46bb-89ec-e6af33439176"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate/ToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2283f4f2-b3dc-4451-ae9a-fe70dc7846f0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate/ToRight"",
                    ""type"": ""Button"",
                    ""id"": ""6825d83e-ecb7-4b5a-9349-fd39dd135a53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""c09fe754-6638-4166-b51f-e1b158ff389a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""f65fb005-3d9a-4b06-a7dd-4904beb6200a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3fd5587a-4c4b-4852-898b-cff7c5cc5836"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EMP Grenade"",
                    ""type"": ""Button"",
                    ""id"": ""ae73d1c7-4a0c-4b06-bb1c-af42cdc427ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e7b81869-2cbe-484c-9b8a-bdff42c98630"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""cb4ec7a0-fe61-43ba-baba-4f354015e8a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d217f59b-c13a-4f33-9f70-ef3649e6390e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9e75b60-3c1c-4d2e-906c-932bce69903e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e42547a-5540-4d80-8098-82a6fe175fe2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e1e8df0-d8e5-4fd5-bfd7-e1898ba75679"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d47c2a3-c858-41c7-98d4-f481e538f509"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93fa34df-70a7-4be9-9b80-4d1b6a97ebff"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d2c1dd-9a96-48d4-a227-211da75ebd2e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""974aaf9b-8acb-481c-8822-b9bdf2883a93"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91c087b7-66d5-4a59-bbc4-d86230ece232"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8072610-30f6-42c1-a6e7-5ccbef3ccef8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a24ae062-2711-41b1-89dd-886643f05db0"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42159fe1-e3f0-4551-a136-d62851786c72"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc4756df-c5f9-4c2e-a71a-809b0c39b88c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6201840-98ca-4e88-8e24-5665116b11da"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""676110b4-ecd0-44dc-9c70-ca053c12ec54"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EMP Grenade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c963c525-eb3b-4e56-8267-73e8d84dd1ba"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d864d54b-e652-4ab2-98e7-6f8ec3941814"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Solo Mode"",
            ""id"": ""e76a7fc6-715c-4b96-8ef8-4d08852d2133"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""8bbb6cb1-3862-44b8-bccb-c366a180deaf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""e3ef909c-7274-43d0-a076-0aca894e4fcb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""0ebfbbd7-ab32-4ca1-a342-3acd1b4c3667"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate/ToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d8fff5e8-6dcf-47ba-9105-aa7bb5b90e60"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate/ToRight"",
                    ""type"": ""Button"",
                    ""id"": ""9352dda1-2e4f-4462-a2f7-3e29e3467188"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""9f2b75bd-9d50-4394-8b12-a9c4ea0191a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""61d1d7a0-909c-466f-abe1-73a51ec99fc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""22275f46-0b80-48a6-ad32-cfb28c74a917"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ee99991-5f49-4627-98b3-26b0ee1a72ea"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9987918-4ab5-4498-a347-a969b9be0745"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e86fb6d0-e9b9-4482-820b-f7e264f32647"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86bcb6fe-d692-4d40-89fc-d65872098ff0"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96770336-be16-4868-b670-ff8d13ea459a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ba95d12-70ee-498e-8608-68653cc7378b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b46d153-a2f9-4e7d-90e1-3c970f336a25"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29aa71b7-410e-49f1-aa31-8b45947c94b8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4185b8ba-e781-4d9e-b631-822459c25c01"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f038512-3f34-4cf1-baf5-187b12db951d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c98c901c-76d7-4473-9b5c-a2f2c04e3bcb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a37790bb-eba8-45df-a65e-df9f6c1af164"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caa8ed2f-88ee-41ca-8716-4ec76feb12ff"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""838b2764-6bb0-437d-a4e1-7f3d76097c9b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f9585a4-5f23-49fc-8ce8-f423b7e69a30"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""599de966-aeb7-472a-8f87-a0aa938bfe28"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141e5143-f6fe-472d-92aa-884ff9834e56"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fc42258-32e9-41db-a980-a157b11eb2c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87c5613f-8030-474e-9d6a-eb801a4ce572"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02b6a2e0-7e0f-4ce4-819f-802ee3498555"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""095da4a5-cb3e-4e64-bd9f-aa9615a01305"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Choose Move"",
            ""id"": ""82f2289e-2f82-43f4-9dbc-b71339165c96"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""679e8553-810a-4910-b40f-16c2c4fb2434"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""19f4613d-0fa0-429c-af6a-7041e948cd89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Up"",
                    ""type"": ""Value"",
                    ""id"": ""0d543827-e708-4731-a5a5-954275ceb4c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""b03d5de2-0ca8-4d2b-a202-5d8c31dfdc50"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""e2dc18f2-0ffc-4cc3-81b4-b83cf289825f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ready"",
                    ""type"": ""Button"",
                    ""id"": ""3cb39db3-98f3-4d28-8867-9928736392b6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""adb139a5-194b-4c51-9d98-0b6834d2bfa1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""703dc082-a7b0-4adc-bd75-3cee346a9468"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a19d2bb5-6fd2-4043-b9be-e8ee787164f3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08d161e0-a567-48ca-abf6-277120de53f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dd9ef90-404c-4324-b33e-5fd02cbc1bda"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35475b84-5a3d-4416-b978-9a878a3a3545"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1349740a-ba04-427e-837f-4613cfdd82b3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb631430-a869-4569-9ef3-307f7dca0d0c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3cdddc2-0bd1-4691-aa33-7905e08bf2cb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6615d1bb-3087-410f-af8f-7487f76337a9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2bdfed6-c6de-49b4-a4f6-ae7b2ce81f67"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc716223-c3bd-40d5-9fef-2596db5e844c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sens Shift"",
            ""id"": ""29562331-e79a-4007-810a-1fa6babc6b26"",
            ""actions"": [
                {
                    ""name"": ""Neutral"",
                    ""type"": ""Button"",
                    ""id"": ""e25b045f-932a-4257-99a7-0c74e3630dc1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 1"",
                    ""type"": ""Button"",
                    ""id"": ""a32e7c97-a2ac-4452-8e31-3ad9fcbc457d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 2"",
                    ""type"": ""Button"",
                    ""id"": ""90bace6f-adf3-4498-8a10-4c942ea260f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 3"",
                    ""type"": ""Button"",
                    ""id"": ""6cd2e1fd-e268-4cf6-a143-bbf9f517a1a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear R1"",
                    ""type"": ""Button"",
                    ""id"": ""2ddabab4-b8c0-4378-bebb-dd817d8d3f53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear R2"",
                    ""type"": ""Button"",
                    ""id"": ""24146142-c5e9-44d3-86a4-284dc6cf6e41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Up Gear"",
                    ""type"": ""Button"",
                    ""id"": ""c4522533-11ba-4d43-91ab-f5f869ca486e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Down Gear"",
                    ""type"": ""Button"",
                    ""id"": ""50b51535-b971-44cd-9e48-195c2f2a033b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Neutral RS"",
                    ""type"": ""Button"",
                    ""id"": ""44de008c-3e17-45ed-8a7f-6367e79f252e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f027ba1-da1e-4cdf-9f2d-a7c5437bb226"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8bb75c5-196a-4023-ad6f-80c0417f91a4"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84d96c93-5e64-43d8-a3c4-1f4d8062994c"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7abead1-4528-492d-88f4-2c1490c7f1eb"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1738a045-9378-4960-ae05-b5d50ef09350"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31292787-3051-4bf8-adc4-0c2387e03d4c"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c38d121f-acec-404c-9e92-cef7ea894376"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Up Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7567d47c-efa2-4cd1-a09a-5f83a2ad54a5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Down Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65d7561-6907-4c3f-bf4f-da1d4bc42a51"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral RS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e8606e6-f253-42e9-8210-04e2e0f7b051"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral RS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sens Shift Solo"",
            ""id"": ""b6dff6d3-fc2c-454a-9e61-297c60f813a3"",
            ""actions"": [
                {
                    ""name"": ""Neutral"",
                    ""type"": ""Button"",
                    ""id"": ""28dd34f4-9a81-4fee-9124-df0d36310a2f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 1"",
                    ""type"": ""Button"",
                    ""id"": ""30fd4d17-0c92-47f7-9cc8-dae072a094ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 2"",
                    ""type"": ""Button"",
                    ""id"": ""21cf009d-1001-4571-adc2-48d97d8eabcf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear 3"",
                    ""type"": ""Button"",
                    ""id"": ""1d54e5b8-7c18-4a3c-b5ee-8e5dae06dd6f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear R1"",
                    ""type"": ""Button"",
                    ""id"": ""53608615-60f6-4314-8671-d28e005b7476"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear R2"",
                    ""type"": ""Button"",
                    ""id"": ""1f72e995-434b-4973-93b7-4e1a0d92f208"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Up Gear"",
                    ""type"": ""Button"",
                    ""id"": ""3c4e443b-fcb8-4c04-b737-00a115b00cff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Down Gear"",
                    ""type"": ""Button"",
                    ""id"": ""ce20b114-352f-4a30-8aef-814140665df1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Neutral RS"",
                    ""type"": ""Button"",
                    ""id"": ""9bb78264-6663-4a4c-9ed5-bb32207d4ec9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a15c3e9a-3cf0-4587-8e92-807dafe89712"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54c11754-2536-43b8-94b3-978b3e5a544f"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0f7082b-db61-4eb2-a399-96e87bb96d58"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e9c50ea-39e7-4e39-84e9-94f0852d5464"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31947c67-db09-4240-b467-8f3988f79e62"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90f303d1-10b2-4e8a-9370-a46553a0ee1a"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a1d112-0959-449b-a2ac-af463b5aff8e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5934f66-8bd2-458c-81d6-de9d1021b50e"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b66350b-85a7-417b-99df-916b7b5cc77e"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdc68b1e-63ab-41ed-8502-1b04d9803438"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f5cbb11-3b6a-4ab5-ab4a-4803c4b9807b"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad31a69-f5fc-4a9d-95e6-228a0eab5d7a"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4cb0c44-7641-41ab-829a-afdbcf9af190"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Up Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cacbce-455b-4a64-8fb0-e4682c1a2362"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Down Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5faf0e7-6b03-434d-a99e-e3b5a4570688"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral RS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Vs Mode P1
        m_VsModeP1 = asset.FindActionMap("Vs Mode P1", throwIfNotFound: true);
        m_VsModeP1_MoveLeft = m_VsModeP1.FindAction("Move/Left", throwIfNotFound: true);
        m_VsModeP1_MoveRight = m_VsModeP1.FindAction("Move/Right", throwIfNotFound: true);
        m_VsModeP1_MoveDown = m_VsModeP1.FindAction("Move/Down", throwIfNotFound: true);
        m_VsModeP1_RotateToLeft = m_VsModeP1.FindAction("Rotate/ToLeft", throwIfNotFound: true);
        m_VsModeP1_RotateToRight = m_VsModeP1.FindAction("Rotate/ToRight", throwIfNotFound: true);
        m_VsModeP1_HardDrop = m_VsModeP1.FindAction("Hard Drop", throwIfNotFound: true);
        m_VsModeP1_Hold = m_VsModeP1.FindAction("Hold", throwIfNotFound: true);
        m_VsModeP1_Attack = m_VsModeP1.FindAction("Attack", throwIfNotFound: true);
        m_VsModeP1_EMPGrenade = m_VsModeP1.FindAction("EMP Grenade", throwIfNotFound: true);
        m_VsModeP1_Pause = m_VsModeP1.FindAction("Pause", throwIfNotFound: true);
        m_VsModeP1_Skill = m_VsModeP1.FindAction("Skill", throwIfNotFound: true);
        // Solo Mode
        m_SoloMode = asset.FindActionMap("Solo Mode", throwIfNotFound: true);
        m_SoloMode_MoveLeft = m_SoloMode.FindAction("Move/Left", throwIfNotFound: true);
        m_SoloMode_MoveRight = m_SoloMode.FindAction("Move/Right", throwIfNotFound: true);
        m_SoloMode_MoveDown = m_SoloMode.FindAction("Move/Down", throwIfNotFound: true);
        m_SoloMode_RotateToLeft = m_SoloMode.FindAction("Rotate/ToLeft", throwIfNotFound: true);
        m_SoloMode_RotateToRight = m_SoloMode.FindAction("Rotate/ToRight", throwIfNotFound: true);
        m_SoloMode_HardDrop = m_SoloMode.FindAction("Hard Drop", throwIfNotFound: true);
        m_SoloMode_Hold = m_SoloMode.FindAction("Hold", throwIfNotFound: true);
        m_SoloMode_Pause = m_SoloMode.FindAction("Pause", throwIfNotFound: true);
        // Choose Move
        m_ChooseMove = asset.FindActionMap("Choose Move", throwIfNotFound: true);
        m_ChooseMove_MoveLeft = m_ChooseMove.FindAction("Move/Left", throwIfNotFound: true);
        m_ChooseMove_MoveRight = m_ChooseMove.FindAction("Move/Right", throwIfNotFound: true);
        m_ChooseMove_MoveUp = m_ChooseMove.FindAction("Move/Up", throwIfNotFound: true);
        m_ChooseMove_MoveDown = m_ChooseMove.FindAction("Move/Down", throwIfNotFound: true);
        m_ChooseMove_Select = m_ChooseMove.FindAction("Select", throwIfNotFound: true);
        m_ChooseMove_Ready = m_ChooseMove.FindAction("Ready", throwIfNotFound: true);
        m_ChooseMove_Options = m_ChooseMove.FindAction("Options", throwIfNotFound: true);
        // Sens Shift
        m_SensShift = asset.FindActionMap("Sens Shift", throwIfNotFound: true);
        m_SensShift_Neutral = m_SensShift.FindAction("Neutral", throwIfNotFound: true);
        m_SensShift_Gear1 = m_SensShift.FindAction("Gear 1", throwIfNotFound: true);
        m_SensShift_Gear2 = m_SensShift.FindAction("Gear 2", throwIfNotFound: true);
        m_SensShift_Gear3 = m_SensShift.FindAction("Gear 3", throwIfNotFound: true);
        m_SensShift_GearR1 = m_SensShift.FindAction("Gear R1", throwIfNotFound: true);
        m_SensShift_GearR2 = m_SensShift.FindAction("Gear R2", throwIfNotFound: true);
        m_SensShift_SwitchUpGear = m_SensShift.FindAction("Switch Up Gear", throwIfNotFound: true);
        m_SensShift_SwitchDownGear = m_SensShift.FindAction("Switch Down Gear", throwIfNotFound: true);
        m_SensShift_NeutralRS = m_SensShift.FindAction("Neutral RS", throwIfNotFound: true);
        // Sens Shift Solo
        m_SensShiftSolo = asset.FindActionMap("Sens Shift Solo", throwIfNotFound: true);
        m_SensShiftSolo_Neutral = m_SensShiftSolo.FindAction("Neutral", throwIfNotFound: true);
        m_SensShiftSolo_Gear1 = m_SensShiftSolo.FindAction("Gear 1", throwIfNotFound: true);
        m_SensShiftSolo_Gear2 = m_SensShiftSolo.FindAction("Gear 2", throwIfNotFound: true);
        m_SensShiftSolo_Gear3 = m_SensShiftSolo.FindAction("Gear 3", throwIfNotFound: true);
        m_SensShiftSolo_GearR1 = m_SensShiftSolo.FindAction("Gear R1", throwIfNotFound: true);
        m_SensShiftSolo_GearR2 = m_SensShiftSolo.FindAction("Gear R2", throwIfNotFound: true);
        m_SensShiftSolo_SwitchUpGear = m_SensShiftSolo.FindAction("Switch Up Gear", throwIfNotFound: true);
        m_SensShiftSolo_SwitchDownGear = m_SensShiftSolo.FindAction("Switch Down Gear", throwIfNotFound: true);
        m_SensShiftSolo_NeutralRS = m_SensShiftSolo.FindAction("Neutral RS", throwIfNotFound: true);
    }

    ~@P1Controller()
    {
        UnityEngine.Debug.Assert(!m_VsModeP1.enabled, "This will cause a leak and performance issues, P1Controller.VsModeP1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SoloMode.enabled, "This will cause a leak and performance issues, P1Controller.SoloMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ChooseMove.enabled, "This will cause a leak and performance issues, P1Controller.ChooseMove.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SensShift.enabled, "This will cause a leak and performance issues, P1Controller.SensShift.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SensShiftSolo.enabled, "This will cause a leak and performance issues, P1Controller.SensShiftSolo.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vs Mode P1
    private readonly InputActionMap m_VsModeP1;
    private List<IVsModeP1Actions> m_VsModeP1ActionsCallbackInterfaces = new List<IVsModeP1Actions>();
    private readonly InputAction m_VsModeP1_MoveLeft;
    private readonly InputAction m_VsModeP1_MoveRight;
    private readonly InputAction m_VsModeP1_MoveDown;
    private readonly InputAction m_VsModeP1_RotateToLeft;
    private readonly InputAction m_VsModeP1_RotateToRight;
    private readonly InputAction m_VsModeP1_HardDrop;
    private readonly InputAction m_VsModeP1_Hold;
    private readonly InputAction m_VsModeP1_Attack;
    private readonly InputAction m_VsModeP1_EMPGrenade;
    private readonly InputAction m_VsModeP1_Pause;
    private readonly InputAction m_VsModeP1_Skill;
    /// <summary>
    /// Provides access to input actions defined in input action map "Vs Mode P1".
    /// </summary>
    public struct VsModeP1Actions
    {
        private @P1Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VsModeP1Actions(@P1Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_VsModeP1_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_VsModeP1_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_VsModeP1_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_VsModeP1_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_VsModeP1_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_VsModeP1_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_VsModeP1_Hold;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_VsModeP1_Attack;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/EMPGrenade".
        /// </summary>
        public InputAction @EMPGrenade => m_Wrapper.m_VsModeP1_EMPGrenade;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VsModeP1_Pause;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Skill".
        /// </summary>
        public InputAction @Skill => m_Wrapper.m_VsModeP1_Skill;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VsModeP1; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VsModeP1Actions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VsModeP1Actions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions" />
        public void AddCallbacks(IVsModeP1Actions instance)
        {
            if (instance == null || m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @EMPGrenade.started += instance.OnEMPGrenade;
            @EMPGrenade.performed += instance.OnEMPGrenade;
            @EMPGrenade.canceled += instance.OnEMPGrenade;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions" />
        private void UnregisterCallbacks(IVsModeP1Actions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @EMPGrenade.started -= instance.OnEMPGrenade;
            @EMPGrenade.performed -= instance.OnEMPGrenade;
            @EMPGrenade.canceled -= instance.OnEMPGrenade;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />.
        /// </summary>
        /// <seealso cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />
        public void RemoveCallbacks(IVsModeP1Actions instance)
        {
            if (m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions.AddCallbacks(IVsModeP1Actions)" />
        /// <seealso cref="VsModeP1Actions.RemoveCallbacks(IVsModeP1Actions)" />
        /// <seealso cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />
        public void SetCallbacks(IVsModeP1Actions instance)
        {
            foreach (var item in m_Wrapper.m_VsModeP1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VsModeP1Actions" /> instance referencing this action map.
    /// </summary>
    public VsModeP1Actions @VsModeP1 => new VsModeP1Actions(this);

    // Solo Mode
    private readonly InputActionMap m_SoloMode;
    private List<ISoloModeActions> m_SoloModeActionsCallbackInterfaces = new List<ISoloModeActions>();
    private readonly InputAction m_SoloMode_MoveLeft;
    private readonly InputAction m_SoloMode_MoveRight;
    private readonly InputAction m_SoloMode_MoveDown;
    private readonly InputAction m_SoloMode_RotateToLeft;
    private readonly InputAction m_SoloMode_RotateToRight;
    private readonly InputAction m_SoloMode_HardDrop;
    private readonly InputAction m_SoloMode_Hold;
    private readonly InputAction m_SoloMode_Pause;
    /// <summary>
    /// Provides access to input actions defined in input action map "Solo Mode".
    /// </summary>
    public struct SoloModeActions
    {
        private @P1Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SoloModeActions(@P1Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_SoloMode_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_SoloMode_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_SoloMode_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_SoloMode_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_SoloMode_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_SoloMode_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_SoloMode_Hold;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_SoloMode_Pause;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SoloMode; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SoloModeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SoloModeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SoloModeActions" />
        public void AddCallbacks(ISoloModeActions instance)
        {
            if (instance == null || m_Wrapper.m_SoloModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SoloModeActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SoloModeActions" />
        private void UnregisterCallbacks(ISoloModeActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />.
        /// </summary>
        /// <seealso cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />
        public void RemoveCallbacks(ISoloModeActions instance)
        {
            if (m_Wrapper.m_SoloModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SoloModeActions.AddCallbacks(ISoloModeActions)" />
        /// <seealso cref="SoloModeActions.RemoveCallbacks(ISoloModeActions)" />
        /// <seealso cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />
        public void SetCallbacks(ISoloModeActions instance)
        {
            foreach (var item in m_Wrapper.m_SoloModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SoloModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SoloModeActions" /> instance referencing this action map.
    /// </summary>
    public SoloModeActions @SoloMode => new SoloModeActions(this);

    // Choose Move
    private readonly InputActionMap m_ChooseMove;
    private List<IChooseMoveActions> m_ChooseMoveActionsCallbackInterfaces = new List<IChooseMoveActions>();
    private readonly InputAction m_ChooseMove_MoveLeft;
    private readonly InputAction m_ChooseMove_MoveRight;
    private readonly InputAction m_ChooseMove_MoveUp;
    private readonly InputAction m_ChooseMove_MoveDown;
    private readonly InputAction m_ChooseMove_Select;
    private readonly InputAction m_ChooseMove_Ready;
    private readonly InputAction m_ChooseMove_Options;
    /// <summary>
    /// Provides access to input actions defined in input action map "Choose Move".
    /// </summary>
    public struct ChooseMoveActions
    {
        private @P1Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ChooseMoveActions(@P1Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_ChooseMove_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_ChooseMove_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveUp".
        /// </summary>
        public InputAction @MoveUp => m_Wrapper.m_ChooseMove_MoveUp;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_ChooseMove_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_ChooseMove_Select;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Ready".
        /// </summary>
        public InputAction @Ready => m_Wrapper.m_ChooseMove_Ready;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Options".
        /// </summary>
        public InputAction @Options => m_Wrapper.m_ChooseMove_Options;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ChooseMove; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ChooseMoveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ChooseMoveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions" />
        public void AddCallbacks(IChooseMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Ready.started += instance.OnReady;
            @Ready.performed += instance.OnReady;
            @Ready.canceled += instance.OnReady;
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions" />
        private void UnregisterCallbacks(IChooseMoveActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Ready.started -= instance.OnReady;
            @Ready.performed -= instance.OnReady;
            @Ready.canceled -= instance.OnReady;
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />.
        /// </summary>
        /// <seealso cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />
        public void RemoveCallbacks(IChooseMoveActions instance)
        {
            if (m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions.AddCallbacks(IChooseMoveActions)" />
        /// <seealso cref="ChooseMoveActions.RemoveCallbacks(IChooseMoveActions)" />
        /// <seealso cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />
        public void SetCallbacks(IChooseMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_ChooseMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ChooseMoveActions" /> instance referencing this action map.
    /// </summary>
    public ChooseMoveActions @ChooseMove => new ChooseMoveActions(this);

    // Sens Shift
    private readonly InputActionMap m_SensShift;
    private List<ISensShiftActions> m_SensShiftActionsCallbackInterfaces = new List<ISensShiftActions>();
    private readonly InputAction m_SensShift_Neutral;
    private readonly InputAction m_SensShift_Gear1;
    private readonly InputAction m_SensShift_Gear2;
    private readonly InputAction m_SensShift_Gear3;
    private readonly InputAction m_SensShift_GearR1;
    private readonly InputAction m_SensShift_GearR2;
    private readonly InputAction m_SensShift_SwitchUpGear;
    private readonly InputAction m_SensShift_SwitchDownGear;
    private readonly InputAction m_SensShift_NeutralRS;
    /// <summary>
    /// Provides access to input actions defined in input action map "Sens Shift".
    /// </summary>
    public struct SensShiftActions
    {
        private @P1Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SensShiftActions(@P1Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SensShift/Neutral".
        /// </summary>
        public InputAction @Neutral => m_Wrapper.m_SensShift_Neutral;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/Gear1".
        /// </summary>
        public InputAction @Gear1 => m_Wrapper.m_SensShift_Gear1;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/Gear2".
        /// </summary>
        public InputAction @Gear2 => m_Wrapper.m_SensShift_Gear2;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/Gear3".
        /// </summary>
        public InputAction @Gear3 => m_Wrapper.m_SensShift_Gear3;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/GearR1".
        /// </summary>
        public InputAction @GearR1 => m_Wrapper.m_SensShift_GearR1;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/GearR2".
        /// </summary>
        public InputAction @GearR2 => m_Wrapper.m_SensShift_GearR2;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/SwitchUpGear".
        /// </summary>
        public InputAction @SwitchUpGear => m_Wrapper.m_SensShift_SwitchUpGear;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/SwitchDownGear".
        /// </summary>
        public InputAction @SwitchDownGear => m_Wrapper.m_SensShift_SwitchDownGear;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/NeutralRS".
        /// </summary>
        public InputAction @NeutralRS => m_Wrapper.m_SensShift_NeutralRS;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SensShift; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SensShiftActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SensShiftActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SensShiftActions" />
        public void AddCallbacks(ISensShiftActions instance)
        {
            if (instance == null || m_Wrapper.m_SensShiftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SensShiftActionsCallbackInterfaces.Add(instance);
            @Neutral.started += instance.OnNeutral;
            @Neutral.performed += instance.OnNeutral;
            @Neutral.canceled += instance.OnNeutral;
            @Gear1.started += instance.OnGear1;
            @Gear1.performed += instance.OnGear1;
            @Gear1.canceled += instance.OnGear1;
            @Gear2.started += instance.OnGear2;
            @Gear2.performed += instance.OnGear2;
            @Gear2.canceled += instance.OnGear2;
            @Gear3.started += instance.OnGear3;
            @Gear3.performed += instance.OnGear3;
            @Gear3.canceled += instance.OnGear3;
            @GearR1.started += instance.OnGearR1;
            @GearR1.performed += instance.OnGearR1;
            @GearR1.canceled += instance.OnGearR1;
            @GearR2.started += instance.OnGearR2;
            @GearR2.performed += instance.OnGearR2;
            @GearR2.canceled += instance.OnGearR2;
            @SwitchUpGear.started += instance.OnSwitchUpGear;
            @SwitchUpGear.performed += instance.OnSwitchUpGear;
            @SwitchUpGear.canceled += instance.OnSwitchUpGear;
            @SwitchDownGear.started += instance.OnSwitchDownGear;
            @SwitchDownGear.performed += instance.OnSwitchDownGear;
            @SwitchDownGear.canceled += instance.OnSwitchDownGear;
            @NeutralRS.started += instance.OnNeutralRS;
            @NeutralRS.performed += instance.OnNeutralRS;
            @NeutralRS.canceled += instance.OnNeutralRS;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SensShiftActions" />
        private void UnregisterCallbacks(ISensShiftActions instance)
        {
            @Neutral.started -= instance.OnNeutral;
            @Neutral.performed -= instance.OnNeutral;
            @Neutral.canceled -= instance.OnNeutral;
            @Gear1.started -= instance.OnGear1;
            @Gear1.performed -= instance.OnGear1;
            @Gear1.canceled -= instance.OnGear1;
            @Gear2.started -= instance.OnGear2;
            @Gear2.performed -= instance.OnGear2;
            @Gear2.canceled -= instance.OnGear2;
            @Gear3.started -= instance.OnGear3;
            @Gear3.performed -= instance.OnGear3;
            @Gear3.canceled -= instance.OnGear3;
            @GearR1.started -= instance.OnGearR1;
            @GearR1.performed -= instance.OnGearR1;
            @GearR1.canceled -= instance.OnGearR1;
            @GearR2.started -= instance.OnGearR2;
            @GearR2.performed -= instance.OnGearR2;
            @GearR2.canceled -= instance.OnGearR2;
            @SwitchUpGear.started -= instance.OnSwitchUpGear;
            @SwitchUpGear.performed -= instance.OnSwitchUpGear;
            @SwitchUpGear.canceled -= instance.OnSwitchUpGear;
            @SwitchDownGear.started -= instance.OnSwitchDownGear;
            @SwitchDownGear.performed -= instance.OnSwitchDownGear;
            @SwitchDownGear.canceled -= instance.OnSwitchDownGear;
            @NeutralRS.started -= instance.OnNeutralRS;
            @NeutralRS.performed -= instance.OnNeutralRS;
            @NeutralRS.canceled -= instance.OnNeutralRS;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />.
        /// </summary>
        /// <seealso cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />
        public void RemoveCallbacks(ISensShiftActions instance)
        {
            if (m_Wrapper.m_SensShiftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SensShiftActions.AddCallbacks(ISensShiftActions)" />
        /// <seealso cref="SensShiftActions.RemoveCallbacks(ISensShiftActions)" />
        /// <seealso cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />
        public void SetCallbacks(ISensShiftActions instance)
        {
            foreach (var item in m_Wrapper.m_SensShiftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SensShiftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SensShiftActions" /> instance referencing this action map.
    /// </summary>
    public SensShiftActions @SensShift => new SensShiftActions(this);

    // Sens Shift Solo
    private readonly InputActionMap m_SensShiftSolo;
    private List<ISensShiftSoloActions> m_SensShiftSoloActionsCallbackInterfaces = new List<ISensShiftSoloActions>();
    private readonly InputAction m_SensShiftSolo_Neutral;
    private readonly InputAction m_SensShiftSolo_Gear1;
    private readonly InputAction m_SensShiftSolo_Gear2;
    private readonly InputAction m_SensShiftSolo_Gear3;
    private readonly InputAction m_SensShiftSolo_GearR1;
    private readonly InputAction m_SensShiftSolo_GearR2;
    private readonly InputAction m_SensShiftSolo_SwitchUpGear;
    private readonly InputAction m_SensShiftSolo_SwitchDownGear;
    private readonly InputAction m_SensShiftSolo_NeutralRS;
    /// <summary>
    /// Provides access to input actions defined in input action map "Sens Shift Solo".
    /// </summary>
    public struct SensShiftSoloActions
    {
        private @P1Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SensShiftSoloActions(@P1Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/Neutral".
        /// </summary>
        public InputAction @Neutral => m_Wrapper.m_SensShiftSolo_Neutral;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/Gear1".
        /// </summary>
        public InputAction @Gear1 => m_Wrapper.m_SensShiftSolo_Gear1;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/Gear2".
        /// </summary>
        public InputAction @Gear2 => m_Wrapper.m_SensShiftSolo_Gear2;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/Gear3".
        /// </summary>
        public InputAction @Gear3 => m_Wrapper.m_SensShiftSolo_Gear3;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/GearR1".
        /// </summary>
        public InputAction @GearR1 => m_Wrapper.m_SensShiftSolo_GearR1;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/GearR2".
        /// </summary>
        public InputAction @GearR2 => m_Wrapper.m_SensShiftSolo_GearR2;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/SwitchUpGear".
        /// </summary>
        public InputAction @SwitchUpGear => m_Wrapper.m_SensShiftSolo_SwitchUpGear;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/SwitchDownGear".
        /// </summary>
        public InputAction @SwitchDownGear => m_Wrapper.m_SensShiftSolo_SwitchDownGear;
        /// <summary>
        /// Provides access to the underlying input action "SensShiftSolo/NeutralRS".
        /// </summary>
        public InputAction @NeutralRS => m_Wrapper.m_SensShiftSolo_NeutralRS;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SensShiftSolo; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SensShiftSoloActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SensShiftSoloActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SensShiftSoloActions" />
        public void AddCallbacks(ISensShiftSoloActions instance)
        {
            if (instance == null || m_Wrapper.m_SensShiftSoloActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SensShiftSoloActionsCallbackInterfaces.Add(instance);
            @Neutral.started += instance.OnNeutral;
            @Neutral.performed += instance.OnNeutral;
            @Neutral.canceled += instance.OnNeutral;
            @Gear1.started += instance.OnGear1;
            @Gear1.performed += instance.OnGear1;
            @Gear1.canceled += instance.OnGear1;
            @Gear2.started += instance.OnGear2;
            @Gear2.performed += instance.OnGear2;
            @Gear2.canceled += instance.OnGear2;
            @Gear3.started += instance.OnGear3;
            @Gear3.performed += instance.OnGear3;
            @Gear3.canceled += instance.OnGear3;
            @GearR1.started += instance.OnGearR1;
            @GearR1.performed += instance.OnGearR1;
            @GearR1.canceled += instance.OnGearR1;
            @GearR2.started += instance.OnGearR2;
            @GearR2.performed += instance.OnGearR2;
            @GearR2.canceled += instance.OnGearR2;
            @SwitchUpGear.started += instance.OnSwitchUpGear;
            @SwitchUpGear.performed += instance.OnSwitchUpGear;
            @SwitchUpGear.canceled += instance.OnSwitchUpGear;
            @SwitchDownGear.started += instance.OnSwitchDownGear;
            @SwitchDownGear.performed += instance.OnSwitchDownGear;
            @SwitchDownGear.canceled += instance.OnSwitchDownGear;
            @NeutralRS.started += instance.OnNeutralRS;
            @NeutralRS.performed += instance.OnNeutralRS;
            @NeutralRS.canceled += instance.OnNeutralRS;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SensShiftSoloActions" />
        private void UnregisterCallbacks(ISensShiftSoloActions instance)
        {
            @Neutral.started -= instance.OnNeutral;
            @Neutral.performed -= instance.OnNeutral;
            @Neutral.canceled -= instance.OnNeutral;
            @Gear1.started -= instance.OnGear1;
            @Gear1.performed -= instance.OnGear1;
            @Gear1.canceled -= instance.OnGear1;
            @Gear2.started -= instance.OnGear2;
            @Gear2.performed -= instance.OnGear2;
            @Gear2.canceled -= instance.OnGear2;
            @Gear3.started -= instance.OnGear3;
            @Gear3.performed -= instance.OnGear3;
            @Gear3.canceled -= instance.OnGear3;
            @GearR1.started -= instance.OnGearR1;
            @GearR1.performed -= instance.OnGearR1;
            @GearR1.canceled -= instance.OnGearR1;
            @GearR2.started -= instance.OnGearR2;
            @GearR2.performed -= instance.OnGearR2;
            @GearR2.canceled -= instance.OnGearR2;
            @SwitchUpGear.started -= instance.OnSwitchUpGear;
            @SwitchUpGear.performed -= instance.OnSwitchUpGear;
            @SwitchUpGear.canceled -= instance.OnSwitchUpGear;
            @SwitchDownGear.started -= instance.OnSwitchDownGear;
            @SwitchDownGear.performed -= instance.OnSwitchDownGear;
            @SwitchDownGear.canceled -= instance.OnSwitchDownGear;
            @NeutralRS.started -= instance.OnNeutralRS;
            @NeutralRS.performed -= instance.OnNeutralRS;
            @NeutralRS.canceled -= instance.OnNeutralRS;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SensShiftSoloActions.UnregisterCallbacks(ISensShiftSoloActions)" />.
        /// </summary>
        /// <seealso cref="SensShiftSoloActions.UnregisterCallbacks(ISensShiftSoloActions)" />
        public void RemoveCallbacks(ISensShiftSoloActions instance)
        {
            if (m_Wrapper.m_SensShiftSoloActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SensShiftSoloActions.AddCallbacks(ISensShiftSoloActions)" />
        /// <seealso cref="SensShiftSoloActions.RemoveCallbacks(ISensShiftSoloActions)" />
        /// <seealso cref="SensShiftSoloActions.UnregisterCallbacks(ISensShiftSoloActions)" />
        public void SetCallbacks(ISensShiftSoloActions instance)
        {
            foreach (var item in m_Wrapper.m_SensShiftSoloActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SensShiftSoloActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SensShiftSoloActions" /> instance referencing this action map.
    /// </summary>
    public SensShiftSoloActions @SensShiftSolo => new SensShiftSoloActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Vs Mode P1" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VsModeP1Actions.AddCallbacks(IVsModeP1Actions)" />
    /// <seealso cref="VsModeP1Actions.RemoveCallbacks(IVsModeP1Actions)" />
    public interface IVsModeP1Actions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EMP Grenade" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEMPGrenade(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Solo Mode" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SoloModeActions.AddCallbacks(ISoloModeActions)" />
    /// <seealso cref="SoloModeActions.RemoveCallbacks(ISoloModeActions)" />
    public interface ISoloModeActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Choose Move" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ChooseMoveActions.AddCallbacks(IChooseMoveActions)" />
    /// <seealso cref="ChooseMoveActions.RemoveCallbacks(IChooseMoveActions)" />
    public interface IChooseMoveActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ready" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Options" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOptions(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Sens Shift" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SensShiftActions.AddCallbacks(ISensShiftActions)" />
    /// <seealso cref="SensShiftActions.RemoveCallbacks(ISensShiftActions)" />
    public interface ISensShiftActions
    {
        /// <summary>
        /// Method invoked when associated input action "Neutral" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNeutral(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear R1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearR1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear R2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearR2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Up Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchUpGear(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Down Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchDownGear(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Neutral RS" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNeutralRS(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Sens Shift Solo" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SensShiftSoloActions.AddCallbacks(ISensShiftSoloActions)" />
    /// <seealso cref="SensShiftSoloActions.RemoveCallbacks(ISensShiftSoloActions)" />
    public interface ISensShiftSoloActions
    {
        /// <summary>
        /// Method invoked when associated input action "Neutral" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNeutral(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGear3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear R1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearR1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Gear R2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearR2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Up Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchUpGear(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Down Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchDownGear(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Neutral RS" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNeutralRS(InputAction.CallbackContext context);
    }
}
