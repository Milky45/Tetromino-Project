//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Controller.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controller: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Vs Mode P1"",
            ""id"": ""43995379-e198-4222-8aea-06b55791742d"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""55c0a2fa-5b55-44e6-86e9-a3e16f34facd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""efc799c1-df64-4708-ba61-92864791755d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""c2e9fdb3-b9ae-46bb-89ec-e6af33439176"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate/ToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2283f4f2-b3dc-4451-ae9a-fe70dc7846f0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate/ToRight"",
                    ""type"": ""Button"",
                    ""id"": ""6825d83e-ecb7-4b5a-9349-fd39dd135a53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""c09fe754-6638-4166-b51f-e1b158ff389a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""f65fb005-3d9a-4b06-a7dd-4904beb6200a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3fd5587a-4c4b-4852-898b-cff7c5cc5836"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EMP Grenade"",
                    ""type"": ""Button"",
                    ""id"": ""ae73d1c7-4a0c-4b06-bb1c-af42cdc427ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e7b81869-2cbe-484c-9b8a-bdff42c98630"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d217f59b-c13a-4f33-9f70-ef3649e6390e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9e75b60-3c1c-4d2e-906c-932bce69903e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e42547a-5540-4d80-8098-82a6fe175fe2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e1e8df0-d8e5-4fd5-bfd7-e1898ba75679"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d47c2a3-c858-41c7-98d4-f481e538f509"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93fa34df-70a7-4be9-9b80-4d1b6a97ebff"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d2c1dd-9a96-48d4-a227-211da75ebd2e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""974aaf9b-8acb-481c-8822-b9bdf2883a93"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91c087b7-66d5-4a59-bbc4-d86230ece232"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8072610-30f6-42c1-a6e7-5ccbef3ccef8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a24ae062-2711-41b1-89dd-886643f05db0"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42159fe1-e3f0-4551-a136-d62851786c72"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc4756df-c5f9-4c2e-a71a-809b0c39b88c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6201840-98ca-4e88-8e24-5665116b11da"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""676110b4-ecd0-44dc-9c70-ca053c12ec54"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EMP Grenade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c963c525-eb3b-4e56-8267-73e8d84dd1ba"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vs Mode P2"",
            ""id"": ""c6a6e4a7-2558-4960-96ae-e4cf0ef88ba7"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""d8e958f1-d8b7-4cc0-abdf-2660043893fb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""1186063d-a1cd-485d-852b-28fe0013db9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""2b486605-6412-4780-88cc-d5e5ee6c9537"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate/ToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e92d8fec-918f-4d7c-98e4-f72971654903"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate/ToRight"",
                    ""type"": ""Button"",
                    ""id"": ""2ff554ce-9ef7-498d-ad4f-1e3c76736cf1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""7537ca2c-8b49-43bb-a727-59cbed62b97c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""a4a01250-3e21-452a-a1f4-ec3747ca1dd1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""995d7834-c0ba-4107-9ac5-5920762303b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EMP Grenade"",
                    ""type"": ""Button"",
                    ""id"": ""502a5c4b-03ee-4070-a726-273369bf9fb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""506b9ab4-97f2-489f-a4ba-f0e4f4d9e972"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1194fdd8-4382-4a22-8ee3-4813c6eeb0c5"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f86ce1d0-ad0c-4bb9-af63-1dfc7d163e3a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d31c9532-3ad1-4a58-8f85-f13990206ba0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da1d35e4-e050-428e-8527-e686fde07747"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""693651be-d100-4eeb-a572-fd99bcda1c1d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ae87b94-1176-44a8-acac-ed7053d3716e"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c9620c-488f-46a6-914c-37c4d636542a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cc88ac3-db56-4c95-9350-21475011e678"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fe94b5f-6098-465a-b317-52c0a96fa0c4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""434677ae-9c6b-48ec-99f8-eabd37dde0cd"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4d4988e-306f-44c3-b880-145a2ae72f00"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78c80f74-c361-4ee1-942d-679ee9b84992"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EMP Grenade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ae6fba6-45f0-4a50-bfc8-b8e229705f99"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Solo Mode"",
            ""id"": ""e76a7fc6-715c-4b96-8ef8-4d08852d2133"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""8bbb6cb1-3862-44b8-bccb-c366a180deaf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""e3ef909c-7274-43d0-a076-0aca894e4fcb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""0ebfbbd7-ab32-4ca1-a342-3acd1b4c3667"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate/ToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d8fff5e8-6dcf-47ba-9105-aa7bb5b90e60"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate/ToRight"",
                    ""type"": ""Button"",
                    ""id"": ""9352dda1-2e4f-4462-a2f7-3e29e3467188"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""9f2b75bd-9d50-4394-8b12-a9c4ea0191a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""61d1d7a0-909c-466f-abe1-73a51ec99fc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ee99991-5f49-4627-98b3-26b0ee1a72ea"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9987918-4ab5-4498-a347-a969b9be0745"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e86fb6d0-e9b9-4482-820b-f7e264f32647"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86bcb6fe-d692-4d40-89fc-d65872098ff0"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96770336-be16-4868-b670-ff8d13ea459a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ba95d12-70ee-498e-8608-68653cc7378b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b46d153-a2f9-4e7d-90e1-3c970f336a25"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29aa71b7-410e-49f1-aa31-8b45947c94b8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4185b8ba-e781-4d9e-b631-822459c25c01"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f038512-3f34-4cf1-baf5-187b12db951d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c98c901c-76d7-4473-9b5c-a2f2c04e3bcb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a37790bb-eba8-45df-a65e-df9f6c1af164"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caa8ed2f-88ee-41ca-8716-4ec76feb12ff"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""838b2764-6bb0-437d-a4e1-7f3d76097c9b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate/ToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f9585a4-5f23-49fc-8ce8-f423b7e69a30"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""599de966-aeb7-472a-8f87-a0aa938bfe28"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141e5143-f6fe-472d-92aa-884ff9834e56"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fc42258-32e9-41db-a980-a157b11eb2c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87c5613f-8030-474e-9d6a-eb801a4ce572"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Vs Mode P1
        m_VsModeP1 = asset.FindActionMap("Vs Mode P1", throwIfNotFound: true);
        m_VsModeP1_MoveLeft = m_VsModeP1.FindAction("Move/Left", throwIfNotFound: true);
        m_VsModeP1_MoveRight = m_VsModeP1.FindAction("Move/Right", throwIfNotFound: true);
        m_VsModeP1_MoveDown = m_VsModeP1.FindAction("Move/Down", throwIfNotFound: true);
        m_VsModeP1_RotateToLeft = m_VsModeP1.FindAction("Rotate/ToLeft", throwIfNotFound: true);
        m_VsModeP1_RotateToRight = m_VsModeP1.FindAction("Rotate/ToRight", throwIfNotFound: true);
        m_VsModeP1_HardDrop = m_VsModeP1.FindAction("Hard Drop", throwIfNotFound: true);
        m_VsModeP1_Hold = m_VsModeP1.FindAction("Hold", throwIfNotFound: true);
        m_VsModeP1_Attack = m_VsModeP1.FindAction("Attack", throwIfNotFound: true);
        m_VsModeP1_EMPGrenade = m_VsModeP1.FindAction("EMP Grenade", throwIfNotFound: true);
        m_VsModeP1_Pause = m_VsModeP1.FindAction("Pause", throwIfNotFound: true);
        // Vs Mode P2
        m_VsModeP2 = asset.FindActionMap("Vs Mode P2", throwIfNotFound: true);
        m_VsModeP2_MoveLeft = m_VsModeP2.FindAction("Move/Left", throwIfNotFound: true);
        m_VsModeP2_MoveRight = m_VsModeP2.FindAction("Move/Right", throwIfNotFound: true);
        m_VsModeP2_MoveDown = m_VsModeP2.FindAction("Move/Down", throwIfNotFound: true);
        m_VsModeP2_RotateToLeft = m_VsModeP2.FindAction("Rotate/ToLeft", throwIfNotFound: true);
        m_VsModeP2_RotateToRight = m_VsModeP2.FindAction("Rotate/ToRight", throwIfNotFound: true);
        m_VsModeP2_HardDrop = m_VsModeP2.FindAction("Hard Drop", throwIfNotFound: true);
        m_VsModeP2_Hold = m_VsModeP2.FindAction("Hold", throwIfNotFound: true);
        m_VsModeP2_Attack = m_VsModeP2.FindAction("Attack", throwIfNotFound: true);
        m_VsModeP2_EMPGrenade = m_VsModeP2.FindAction("EMP Grenade", throwIfNotFound: true);
        m_VsModeP2_Pause = m_VsModeP2.FindAction("Pause", throwIfNotFound: true);
        // Solo Mode
        m_SoloMode = asset.FindActionMap("Solo Mode", throwIfNotFound: true);
        m_SoloMode_MoveLeft = m_SoloMode.FindAction("Move/Left", throwIfNotFound: true);
        m_SoloMode_MoveRight = m_SoloMode.FindAction("Move/Right", throwIfNotFound: true);
        m_SoloMode_MoveDown = m_SoloMode.FindAction("Move/Down", throwIfNotFound: true);
        m_SoloMode_RotateToLeft = m_SoloMode.FindAction("Rotate/ToLeft", throwIfNotFound: true);
        m_SoloMode_RotateToRight = m_SoloMode.FindAction("Rotate/ToRight", throwIfNotFound: true);
        m_SoloMode_HardDrop = m_SoloMode.FindAction("Hard Drop", throwIfNotFound: true);
        m_SoloMode_Hold = m_SoloMode.FindAction("Hold", throwIfNotFound: true);
    }

    ~@Controller()
    {
        UnityEngine.Debug.Assert(!m_VsModeP1.enabled, "This will cause a leak and performance issues, Controller.VsModeP1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_VsModeP2.enabled, "This will cause a leak and performance issues, Controller.VsModeP2.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SoloMode.enabled, "This will cause a leak and performance issues, Controller.SoloMode.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vs Mode P1
    private readonly InputActionMap m_VsModeP1;
    private List<IVsModeP1Actions> m_VsModeP1ActionsCallbackInterfaces = new List<IVsModeP1Actions>();
    private readonly InputAction m_VsModeP1_MoveLeft;
    private readonly InputAction m_VsModeP1_MoveRight;
    private readonly InputAction m_VsModeP1_MoveDown;
    private readonly InputAction m_VsModeP1_RotateToLeft;
    private readonly InputAction m_VsModeP1_RotateToRight;
    private readonly InputAction m_VsModeP1_HardDrop;
    private readonly InputAction m_VsModeP1_Hold;
    private readonly InputAction m_VsModeP1_Attack;
    private readonly InputAction m_VsModeP1_EMPGrenade;
    private readonly InputAction m_VsModeP1_Pause;
    /// <summary>
    /// Provides access to input actions defined in input action map "Vs Mode P1".
    /// </summary>
    public struct VsModeP1Actions
    {
        private @Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VsModeP1Actions(@Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_VsModeP1_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_VsModeP1_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_VsModeP1_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_VsModeP1_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_VsModeP1_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_VsModeP1_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_VsModeP1_Hold;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_VsModeP1_Attack;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/EMPGrenade".
        /// </summary>
        public InputAction @EMPGrenade => m_Wrapper.m_VsModeP1_EMPGrenade;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP1/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VsModeP1_Pause;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VsModeP1; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VsModeP1Actions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VsModeP1Actions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions" />
        public void AddCallbacks(IVsModeP1Actions instance)
        {
            if (instance == null || m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @EMPGrenade.started += instance.OnEMPGrenade;
            @EMPGrenade.performed += instance.OnEMPGrenade;
            @EMPGrenade.canceled += instance.OnEMPGrenade;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions" />
        private void UnregisterCallbacks(IVsModeP1Actions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @EMPGrenade.started -= instance.OnEMPGrenade;
            @EMPGrenade.performed -= instance.OnEMPGrenade;
            @EMPGrenade.canceled -= instance.OnEMPGrenade;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />.
        /// </summary>
        /// <seealso cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />
        public void RemoveCallbacks(IVsModeP1Actions instance)
        {
            if (m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VsModeP1Actions.AddCallbacks(IVsModeP1Actions)" />
        /// <seealso cref="VsModeP1Actions.RemoveCallbacks(IVsModeP1Actions)" />
        /// <seealso cref="VsModeP1Actions.UnregisterCallbacks(IVsModeP1Actions)" />
        public void SetCallbacks(IVsModeP1Actions instance)
        {
            foreach (var item in m_Wrapper.m_VsModeP1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VsModeP1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VsModeP1Actions" /> instance referencing this action map.
    /// </summary>
    public VsModeP1Actions @VsModeP1 => new VsModeP1Actions(this);

    // Vs Mode P2
    private readonly InputActionMap m_VsModeP2;
    private List<IVsModeP2Actions> m_VsModeP2ActionsCallbackInterfaces = new List<IVsModeP2Actions>();
    private readonly InputAction m_VsModeP2_MoveLeft;
    private readonly InputAction m_VsModeP2_MoveRight;
    private readonly InputAction m_VsModeP2_MoveDown;
    private readonly InputAction m_VsModeP2_RotateToLeft;
    private readonly InputAction m_VsModeP2_RotateToRight;
    private readonly InputAction m_VsModeP2_HardDrop;
    private readonly InputAction m_VsModeP2_Hold;
    private readonly InputAction m_VsModeP2_Attack;
    private readonly InputAction m_VsModeP2_EMPGrenade;
    private readonly InputAction m_VsModeP2_Pause;
    /// <summary>
    /// Provides access to input actions defined in input action map "Vs Mode P2".
    /// </summary>
    public struct VsModeP2Actions
    {
        private @Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VsModeP2Actions(@Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_VsModeP2_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_VsModeP2_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_VsModeP2_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_VsModeP2_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_VsModeP2_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_VsModeP2_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_VsModeP2_Hold;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_VsModeP2_Attack;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/EMPGrenade".
        /// </summary>
        public InputAction @EMPGrenade => m_Wrapper.m_VsModeP2_EMPGrenade;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VsModeP2_Pause;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VsModeP2; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VsModeP2Actions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VsModeP2Actions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions" />
        public void AddCallbacks(IVsModeP2Actions instance)
        {
            if (instance == null || m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @EMPGrenade.started += instance.OnEMPGrenade;
            @EMPGrenade.performed += instance.OnEMPGrenade;
            @EMPGrenade.canceled += instance.OnEMPGrenade;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions" />
        private void UnregisterCallbacks(IVsModeP2Actions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @EMPGrenade.started -= instance.OnEMPGrenade;
            @EMPGrenade.performed -= instance.OnEMPGrenade;
            @EMPGrenade.canceled -= instance.OnEMPGrenade;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />.
        /// </summary>
        /// <seealso cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />
        public void RemoveCallbacks(IVsModeP2Actions instance)
        {
            if (m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions.AddCallbacks(IVsModeP2Actions)" />
        /// <seealso cref="VsModeP2Actions.RemoveCallbacks(IVsModeP2Actions)" />
        /// <seealso cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />
        public void SetCallbacks(IVsModeP2Actions instance)
        {
            foreach (var item in m_Wrapper.m_VsModeP2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VsModeP2Actions" /> instance referencing this action map.
    /// </summary>
    public VsModeP2Actions @VsModeP2 => new VsModeP2Actions(this);

    // Solo Mode
    private readonly InputActionMap m_SoloMode;
    private List<ISoloModeActions> m_SoloModeActionsCallbackInterfaces = new List<ISoloModeActions>();
    private readonly InputAction m_SoloMode_MoveLeft;
    private readonly InputAction m_SoloMode_MoveRight;
    private readonly InputAction m_SoloMode_MoveDown;
    private readonly InputAction m_SoloMode_RotateToLeft;
    private readonly InputAction m_SoloMode_RotateToRight;
    private readonly InputAction m_SoloMode_HardDrop;
    private readonly InputAction m_SoloMode_Hold;
    /// <summary>
    /// Provides access to input actions defined in input action map "Solo Mode".
    /// </summary>
    public struct SoloModeActions
    {
        private @Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SoloModeActions(@Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_SoloMode_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_SoloMode_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_SoloMode_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_SoloMode_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_SoloMode_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_SoloMode_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "SoloMode/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_SoloMode_Hold;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SoloMode; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SoloModeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SoloModeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SoloModeActions" />
        public void AddCallbacks(ISoloModeActions instance)
        {
            if (instance == null || m_Wrapper.m_SoloModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SoloModeActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SoloModeActions" />
        private void UnregisterCallbacks(ISoloModeActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />.
        /// </summary>
        /// <seealso cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />
        public void RemoveCallbacks(ISoloModeActions instance)
        {
            if (m_Wrapper.m_SoloModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SoloModeActions.AddCallbacks(ISoloModeActions)" />
        /// <seealso cref="SoloModeActions.RemoveCallbacks(ISoloModeActions)" />
        /// <seealso cref="SoloModeActions.UnregisterCallbacks(ISoloModeActions)" />
        public void SetCallbacks(ISoloModeActions instance)
        {
            foreach (var item in m_Wrapper.m_SoloModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SoloModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SoloModeActions" /> instance referencing this action map.
    /// </summary>
    public SoloModeActions @SoloMode => new SoloModeActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Vs Mode P1" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VsModeP1Actions.AddCallbacks(IVsModeP1Actions)" />
    /// <seealso cref="VsModeP1Actions.RemoveCallbacks(IVsModeP1Actions)" />
    public interface IVsModeP1Actions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EMP Grenade" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEMPGrenade(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Vs Mode P2" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VsModeP2Actions.AddCallbacks(IVsModeP2Actions)" />
    /// <seealso cref="VsModeP2Actions.RemoveCallbacks(IVsModeP2Actions)" />
    public interface IVsModeP2Actions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EMP Grenade" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEMPGrenade(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Solo Mode" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SoloModeActions.AddCallbacks(ISoloModeActions)" />
    /// <seealso cref="SoloModeActions.RemoveCallbacks(ISoloModeActions)" />
    public interface ISoloModeActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate/ToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
    }
}
