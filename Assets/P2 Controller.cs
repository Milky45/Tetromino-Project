//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/P2 Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/P2 Controller.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @P2Controller: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @P2Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""P2 Controller"",
    ""maps"": [
        {
            ""name"": ""Vs Mode P2"",
            ""id"": ""8bcfc277-b9fa-4e85-8050-2c0dafe3d00c"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""b2584605-f6bf-499a-8cd3-3a9b1bd6eb6d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""a1c7ac3f-71c8-441f-bc65-05aafd34f8f5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""314f9dd3-5c53-477a-91c4-49d9ca3af63b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateToLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ff789c8e-196f-4c7a-be6e-9d3c5c7d4096"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateToRight"",
                    ""type"": ""Button"",
                    ""id"": ""e991726c-c996-405f-858e-37df41cb4ee9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard Drop"",
                    ""type"": ""Button"",
                    ""id"": ""30408649-15e8-40c6-8edb-60f688074a1d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""93a7ec6c-8b5e-4582-88eb-7bf7a49c81db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EMP Grenade"",
                    ""type"": ""Button"",
                    ""id"": ""f289a1bf-ffd2-4d4d-9fd8-920a3a4236a3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""a0796617-10a7-49c2-8977-6289d5615c10"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""8d0ee3e1-7f54-4c29-a7fb-7518f97ffa00"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""97a53978-bf85-4e85-a8ab-b7d7b5f70753"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19220206-97d2-4250-9be4-36e946eaf568"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1c1b604-088c-44bf-a339-a7b5b01f4129"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdf26001-f1f5-4f72-b786-9a17ebd76cfd"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b1d17f5-01eb-47ec-81bc-d8ca34c2359f"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateToLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59eea42a-6f35-4ec8-bfa1-46b5c4b2d394"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateToRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e463fa8-978f-4298-9f63-590611ae81db"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""717f3690-ade1-4bdf-a459-adb68749165c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1702f853-470a-4388-8c17-a6417f39224b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EMP Grenade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a54b13f-c2c3-436a-b598-afb9537d29aa"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df7e283-13ea-4534-bfff-26580ba04638"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7f86fd6-76e9-4dc1-9434-54d7d4b37e9c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Choose Move"",
            ""id"": ""e218c5c3-3599-4c72-ac94-f095cae826d4"",
            ""actions"": [
                {
                    ""name"": ""Move/Left"",
                    ""type"": ""Value"",
                    ""id"": ""7dc90a66-7a1f-4ef5-b6af-e875b6eed47e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Right"",
                    ""type"": ""Value"",
                    ""id"": ""d6eafea5-0ab9-44ca-9a2b-64850a763211"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Up"",
                    ""type"": ""Value"",
                    ""id"": ""ed2165b8-9e1a-4f0a-8826-be05f51f79b5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move/Down"",
                    ""type"": ""Value"",
                    ""id"": ""3fbcf4ab-3e99-4271-98f0-b1ab5d46454a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a5020a16-2397-4b21-af4b-afd61abb9d8b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ready"",
                    ""type"": ""Button"",
                    ""id"": ""88e57844-7602-4dbc-b273-ae1e1f1a9dc6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""d14c76a7-7aed-4457-a31b-2ad6db0eafb5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2f9db84-7324-41ef-b586-bfcc345a908f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5621555f-b104-4826-991d-b024de50a8d5"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed2fc01b-5c67-4371-9fa6-b962ae1cd9aa"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""449e011d-dcd9-4379-8993-be572a9ed580"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31012c2b-6b5c-4065-8672-8d4c82d2af9c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4654ffe-8b71-407a-bece-debf704129b1"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d672a089-b549-4e79-ba80-67c231dc1f12"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13e5fd8f-a091-4c48-a950-33405834b56a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""869c34c0-b959-4465-823a-a3c185939108"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1466277a-8295-4552-a664-299d0eba9e16"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc258a88-8dee-450d-b08a-1fff118ed89a"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sens Shift"",
            ""id"": ""a3dee486-a55f-42c2-b5ed-be569a8a9014"",
            ""actions"": [
                {
                    ""name"": ""Neutral"",
                    ""type"": ""Button"",
                    ""id"": ""5623b5b5-31a9-4aae-821b-b5b0682a4a93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Up Gear"",
                    ""type"": ""Button"",
                    ""id"": ""dc54cdf3-5564-462a-a592-a73f02a8936e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Down Gear"",
                    ""type"": ""Button"",
                    ""id"": ""404a897e-249a-47df-858c-6d4a2af58d70"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51e925e9-779d-46f0-859d-b6cd91d8b44f"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Up Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d283c5af-a242-4184-b92b-9bfc0e66188e"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Down Gear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4909945-930e-4099-bd60-123c06e81954"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Vs Mode P2
        m_VsModeP2 = asset.FindActionMap("Vs Mode P2", throwIfNotFound: true);
        m_VsModeP2_MoveLeft = m_VsModeP2.FindAction("Move/Left", throwIfNotFound: true);
        m_VsModeP2_MoveRight = m_VsModeP2.FindAction("Move/Right", throwIfNotFound: true);
        m_VsModeP2_MoveDown = m_VsModeP2.FindAction("Move/Down", throwIfNotFound: true);
        m_VsModeP2_RotateToLeft = m_VsModeP2.FindAction("RotateToLeft", throwIfNotFound: true);
        m_VsModeP2_RotateToRight = m_VsModeP2.FindAction("RotateToRight", throwIfNotFound: true);
        m_VsModeP2_HardDrop = m_VsModeP2.FindAction("Hard Drop", throwIfNotFound: true);
        m_VsModeP2_Attack = m_VsModeP2.FindAction("Attack", throwIfNotFound: true);
        m_VsModeP2_EMPGrenade = m_VsModeP2.FindAction("EMP Grenade", throwIfNotFound: true);
        m_VsModeP2_Hold = m_VsModeP2.FindAction("Hold", throwIfNotFound: true);
        m_VsModeP2_Pause = m_VsModeP2.FindAction("Pause", throwIfNotFound: true);
        m_VsModeP2_Skill = m_VsModeP2.FindAction("Skill", throwIfNotFound: true);
        // Choose Move
        m_ChooseMove = asset.FindActionMap("Choose Move", throwIfNotFound: true);
        m_ChooseMove_MoveLeft = m_ChooseMove.FindAction("Move/Left", throwIfNotFound: true);
        m_ChooseMove_MoveRight = m_ChooseMove.FindAction("Move/Right", throwIfNotFound: true);
        m_ChooseMove_MoveUp = m_ChooseMove.FindAction("Move/Up", throwIfNotFound: true);
        m_ChooseMove_MoveDown = m_ChooseMove.FindAction("Move/Down", throwIfNotFound: true);
        m_ChooseMove_Select = m_ChooseMove.FindAction("Select", throwIfNotFound: true);
        m_ChooseMove_Ready = m_ChooseMove.FindAction("Ready", throwIfNotFound: true);
        m_ChooseMove_Options = m_ChooseMove.FindAction("Options", throwIfNotFound: true);
        // Sens Shift
        m_SensShift = asset.FindActionMap("Sens Shift", throwIfNotFound: true);
        m_SensShift_Neutral = m_SensShift.FindAction("Neutral", throwIfNotFound: true);
        m_SensShift_SwitchUpGear = m_SensShift.FindAction("Switch Up Gear", throwIfNotFound: true);
        m_SensShift_SwitchDownGear = m_SensShift.FindAction("Switch Down Gear", throwIfNotFound: true);
    }

    ~@P2Controller()
    {
        UnityEngine.Debug.Assert(!m_VsModeP2.enabled, "This will cause a leak and performance issues, P2Controller.VsModeP2.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ChooseMove.enabled, "This will cause a leak and performance issues, P2Controller.ChooseMove.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SensShift.enabled, "This will cause a leak and performance issues, P2Controller.SensShift.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vs Mode P2
    private readonly InputActionMap m_VsModeP2;
    private List<IVsModeP2Actions> m_VsModeP2ActionsCallbackInterfaces = new List<IVsModeP2Actions>();
    private readonly InputAction m_VsModeP2_MoveLeft;
    private readonly InputAction m_VsModeP2_MoveRight;
    private readonly InputAction m_VsModeP2_MoveDown;
    private readonly InputAction m_VsModeP2_RotateToLeft;
    private readonly InputAction m_VsModeP2_RotateToRight;
    private readonly InputAction m_VsModeP2_HardDrop;
    private readonly InputAction m_VsModeP2_Attack;
    private readonly InputAction m_VsModeP2_EMPGrenade;
    private readonly InputAction m_VsModeP2_Hold;
    private readonly InputAction m_VsModeP2_Pause;
    private readonly InputAction m_VsModeP2_Skill;
    /// <summary>
    /// Provides access to input actions defined in input action map "Vs Mode P2".
    /// </summary>
    public struct VsModeP2Actions
    {
        private @P2Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VsModeP2Actions(@P2Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_VsModeP2_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_VsModeP2_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_VsModeP2_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/RotateToLeft".
        /// </summary>
        public InputAction @RotateToLeft => m_Wrapper.m_VsModeP2_RotateToLeft;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/RotateToRight".
        /// </summary>
        public InputAction @RotateToRight => m_Wrapper.m_VsModeP2_RotateToRight;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/HardDrop".
        /// </summary>
        public InputAction @HardDrop => m_Wrapper.m_VsModeP2_HardDrop;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_VsModeP2_Attack;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/EMPGrenade".
        /// </summary>
        public InputAction @EMPGrenade => m_Wrapper.m_VsModeP2_EMPGrenade;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Hold".
        /// </summary>
        public InputAction @Hold => m_Wrapper.m_VsModeP2_Hold;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VsModeP2_Pause;
        /// <summary>
        /// Provides access to the underlying input action "VsModeP2/Skill".
        /// </summary>
        public InputAction @Skill => m_Wrapper.m_VsModeP2_Skill;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VsModeP2; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VsModeP2Actions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VsModeP2Actions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions" />
        public void AddCallbacks(IVsModeP2Actions instance)
        {
            if (instance == null || m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @RotateToLeft.started += instance.OnRotateToLeft;
            @RotateToLeft.performed += instance.OnRotateToLeft;
            @RotateToLeft.canceled += instance.OnRotateToLeft;
            @RotateToRight.started += instance.OnRotateToRight;
            @RotateToRight.performed += instance.OnRotateToRight;
            @RotateToRight.canceled += instance.OnRotateToRight;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @EMPGrenade.started += instance.OnEMPGrenade;
            @EMPGrenade.performed += instance.OnEMPGrenade;
            @EMPGrenade.canceled += instance.OnEMPGrenade;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions" />
        private void UnregisterCallbacks(IVsModeP2Actions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @RotateToLeft.started -= instance.OnRotateToLeft;
            @RotateToLeft.performed -= instance.OnRotateToLeft;
            @RotateToLeft.canceled -= instance.OnRotateToLeft;
            @RotateToRight.started -= instance.OnRotateToRight;
            @RotateToRight.performed -= instance.OnRotateToRight;
            @RotateToRight.canceled -= instance.OnRotateToRight;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @EMPGrenade.started -= instance.OnEMPGrenade;
            @EMPGrenade.performed -= instance.OnEMPGrenade;
            @EMPGrenade.canceled -= instance.OnEMPGrenade;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />.
        /// </summary>
        /// <seealso cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />
        public void RemoveCallbacks(IVsModeP2Actions instance)
        {
            if (m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VsModeP2Actions.AddCallbacks(IVsModeP2Actions)" />
        /// <seealso cref="VsModeP2Actions.RemoveCallbacks(IVsModeP2Actions)" />
        /// <seealso cref="VsModeP2Actions.UnregisterCallbacks(IVsModeP2Actions)" />
        public void SetCallbacks(IVsModeP2Actions instance)
        {
            foreach (var item in m_Wrapper.m_VsModeP2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VsModeP2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VsModeP2Actions" /> instance referencing this action map.
    /// </summary>
    public VsModeP2Actions @VsModeP2 => new VsModeP2Actions(this);

    // Choose Move
    private readonly InputActionMap m_ChooseMove;
    private List<IChooseMoveActions> m_ChooseMoveActionsCallbackInterfaces = new List<IChooseMoveActions>();
    private readonly InputAction m_ChooseMove_MoveLeft;
    private readonly InputAction m_ChooseMove_MoveRight;
    private readonly InputAction m_ChooseMove_MoveUp;
    private readonly InputAction m_ChooseMove_MoveDown;
    private readonly InputAction m_ChooseMove_Select;
    private readonly InputAction m_ChooseMove_Ready;
    private readonly InputAction m_ChooseMove_Options;
    /// <summary>
    /// Provides access to input actions defined in input action map "Choose Move".
    /// </summary>
    public struct ChooseMoveActions
    {
        private @P2Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ChooseMoveActions(@P2Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_ChooseMove_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_ChooseMove_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveUp".
        /// </summary>
        public InputAction @MoveUp => m_Wrapper.m_ChooseMove_MoveUp;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_ChooseMove_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_ChooseMove_Select;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Ready".
        /// </summary>
        public InputAction @Ready => m_Wrapper.m_ChooseMove_Ready;
        /// <summary>
        /// Provides access to the underlying input action "ChooseMove/Options".
        /// </summary>
        public InputAction @Options => m_Wrapper.m_ChooseMove_Options;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ChooseMove; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ChooseMoveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ChooseMoveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions" />
        public void AddCallbacks(IChooseMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Ready.started += instance.OnReady;
            @Ready.performed += instance.OnReady;
            @Ready.canceled += instance.OnReady;
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions" />
        private void UnregisterCallbacks(IChooseMoveActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Ready.started -= instance.OnReady;
            @Ready.performed -= instance.OnReady;
            @Ready.canceled -= instance.OnReady;
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />.
        /// </summary>
        /// <seealso cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />
        public void RemoveCallbacks(IChooseMoveActions instance)
        {
            if (m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ChooseMoveActions.AddCallbacks(IChooseMoveActions)" />
        /// <seealso cref="ChooseMoveActions.RemoveCallbacks(IChooseMoveActions)" />
        /// <seealso cref="ChooseMoveActions.UnregisterCallbacks(IChooseMoveActions)" />
        public void SetCallbacks(IChooseMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_ChooseMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChooseMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ChooseMoveActions" /> instance referencing this action map.
    /// </summary>
    public ChooseMoveActions @ChooseMove => new ChooseMoveActions(this);

    // Sens Shift
    private readonly InputActionMap m_SensShift;
    private List<ISensShiftActions> m_SensShiftActionsCallbackInterfaces = new List<ISensShiftActions>();
    private readonly InputAction m_SensShift_Neutral;
    private readonly InputAction m_SensShift_SwitchUpGear;
    private readonly InputAction m_SensShift_SwitchDownGear;
    /// <summary>
    /// Provides access to input actions defined in input action map "Sens Shift".
    /// </summary>
    public struct SensShiftActions
    {
        private @P2Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SensShiftActions(@P2Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SensShift/Neutral".
        /// </summary>
        public InputAction @Neutral => m_Wrapper.m_SensShift_Neutral;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/SwitchUpGear".
        /// </summary>
        public InputAction @SwitchUpGear => m_Wrapper.m_SensShift_SwitchUpGear;
        /// <summary>
        /// Provides access to the underlying input action "SensShift/SwitchDownGear".
        /// </summary>
        public InputAction @SwitchDownGear => m_Wrapper.m_SensShift_SwitchDownGear;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SensShift; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SensShiftActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SensShiftActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SensShiftActions" />
        public void AddCallbacks(ISensShiftActions instance)
        {
            if (instance == null || m_Wrapper.m_SensShiftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SensShiftActionsCallbackInterfaces.Add(instance);
            @Neutral.started += instance.OnNeutral;
            @Neutral.performed += instance.OnNeutral;
            @Neutral.canceled += instance.OnNeutral;
            @SwitchUpGear.started += instance.OnSwitchUpGear;
            @SwitchUpGear.performed += instance.OnSwitchUpGear;
            @SwitchUpGear.canceled += instance.OnSwitchUpGear;
            @SwitchDownGear.started += instance.OnSwitchDownGear;
            @SwitchDownGear.performed += instance.OnSwitchDownGear;
            @SwitchDownGear.canceled += instance.OnSwitchDownGear;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SensShiftActions" />
        private void UnregisterCallbacks(ISensShiftActions instance)
        {
            @Neutral.started -= instance.OnNeutral;
            @Neutral.performed -= instance.OnNeutral;
            @Neutral.canceled -= instance.OnNeutral;
            @SwitchUpGear.started -= instance.OnSwitchUpGear;
            @SwitchUpGear.performed -= instance.OnSwitchUpGear;
            @SwitchUpGear.canceled -= instance.OnSwitchUpGear;
            @SwitchDownGear.started -= instance.OnSwitchDownGear;
            @SwitchDownGear.performed -= instance.OnSwitchDownGear;
            @SwitchDownGear.canceled -= instance.OnSwitchDownGear;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />.
        /// </summary>
        /// <seealso cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />
        public void RemoveCallbacks(ISensShiftActions instance)
        {
            if (m_Wrapper.m_SensShiftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SensShiftActions.AddCallbacks(ISensShiftActions)" />
        /// <seealso cref="SensShiftActions.RemoveCallbacks(ISensShiftActions)" />
        /// <seealso cref="SensShiftActions.UnregisterCallbacks(ISensShiftActions)" />
        public void SetCallbacks(ISensShiftActions instance)
        {
            foreach (var item in m_Wrapper.m_SensShiftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SensShiftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SensShiftActions" /> instance referencing this action map.
    /// </summary>
    public SensShiftActions @SensShift => new SensShiftActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Vs Mode P2" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VsModeP2Actions.AddCallbacks(IVsModeP2Actions)" />
    /// <seealso cref="VsModeP2Actions.RemoveCallbacks(IVsModeP2Actions)" />
    public interface IVsModeP2Actions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotateToLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotateToRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateToRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hard Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHardDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EMP Grenade" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEMPGrenade(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Choose Move" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ChooseMoveActions.AddCallbacks(IChooseMoveActions)" />
    /// <seealso cref="ChooseMoveActions.RemoveCallbacks(IChooseMoveActions)" />
    public interface IChooseMoveActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move/Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move/Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ready" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Options" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOptions(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Sens Shift" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SensShiftActions.AddCallbacks(ISensShiftActions)" />
    /// <seealso cref="SensShiftActions.RemoveCallbacks(ISensShiftActions)" />
    public interface ISensShiftActions
    {
        /// <summary>
        /// Method invoked when associated input action "Neutral" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNeutral(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Up Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchUpGear(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Switch Down Gear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchDownGear(InputAction.CallbackContext context);
    }
}
